from variables import suusr, supass,ext,port as trop,sshkey, usr, passwd,rpc_passwd,rpc_usrname
# from local import gen_key, key_type,fullkey
from local_fun import verbose, clean_up
from wallet import znodeprivkey
import paramiko, requests
from time import sleep

#enter client
client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect(hostname=ext, username=suusr, pkey=sshkey,port=trop)
channel = client.invoke_shell()
channel.recv(99999)
channel.send('\n')
sleep(1) 
channel.recv(99999)

def ssh(c): ## look over this again, it looks strange..
    #check if root already
    channel.send("whoami")
    sleep(0.1) 
    w = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
    if "root" in w: 
         su = True
    s = c.split(" ")
    if su:
        # if sudo in command remove sudo from command
        if s[0] == sudo:
            s.pop(0)
            channel.send(s+' \n')
            sleep(0.1)
        else:
             channel.send(c+" \n")
             sleep(0.1)
    if s[0] == 'sudo':
        sudo = True
    else:
        sudo = False
    if sudo:
        channel.send('sudo whoami \n')
        sleep(0.1)
        channel.send(supass)
        sleep(0.1)
        channel.send('\n')
        sleep(0.1)
        r = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
        if 'root' not in r[1]:
            channel.send('sudo whoami \n')
            sleep(0.1)
            channel.send(supass)
            sleep(0.1)
            channel.send('\n')
            sleep(0.1)
            r = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
            if 'sudo: command not found' or 'root' not in r[1]:
                s.pop(0)
                channel.send('su - \n')
                sleep(0.1)
                channel.send(supass)
                sleep(0.1)
                channel.send('\n')
                sleep(0.1)
                channel.recv(99999)
                channel.send('whoami \n')
                sleep(0.1)
                r = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
                if 'root' not in r[1]:
                    channel.send('su - \n')
                    sleep(0.1)
                    channel.send(supass)
                    sleep(0.1)
                    channel.send('\n')
                    sleep(0.1)
                    channel.recv(99999)
                    channel.send('whoami \n')
                    sleep(0.1)
                    r = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
                    if 'root' not in r[1]:
                        print("ERROR: COULD NOT GAIN ELIVATED PRIVLAGES")
                        clean_up()
                    else:
                        m=r
                else:
                    m=r
            else:
                m=r
        else:
            channel.send(c+' \n')
            sleep(0.1)
            m = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
    else:
        channel.send(c+' \n')
        sleep(0.1)
        m = channel.recv(99999).decode('utf-8').replace('\r','').split('\n')
    return m
    
ssh() ## check if updating if system updating print and wait x3 then exit

#Gather server disro info
x=ssh('cat /etc/os-release')
for y in x:
	if "ID" == x.split('=')[0]:
	    dist = x
for y in x:
	if "VERSION_ID" == x.split('=')[0]:
		dist_ver=x
          
#Gather server LAN info for static IP creation
x=ssh('ip -o -f inet addr show')[2].split(" ")
network = x[6]
ipv4 = network.split('/')[0]
subnet = network.split('/')[1]
ni = x[1]
broadcast = x[10]
gateway = ssh('ip route')[1].split(" ")[2]

### Create static ip address ###
#ifupdown, netplan, systemd-networkd, NetworkManager
if dist == 'debian' or ('ubuntu' and dist_ver <= '16'):
    #ifupdown
    ssh('sudo cp /etc/network/interfaces /etc/network/interfaces.bak')
    ssh('echo -e "#Generated by Firo Masternode Startup Script\n\n#The loopback network interface\nauto lo\niface lo inet loopback\n\nsource /etc/network/interfaces.d/*\n\n#The primary network interface\nauto '+ni+'\nallow-hotplug'+ni+'\niface '+ni+' inet static\n\taddress '+network+'\n\tbroadcast '+broadcast+'\n\tgateway '+gateway+'\n\tdns-nameservers 1.1.1.1,1.0.0.1\n" > etc/network/interfaces')
    ssh('sudo ifdown '+ni+' && sudo ifup '+ni)
elif dist == 'ubuntu' and dist_ver > '16': # double check all versions 16+ can use NetworkManager else networkd
    # netplan
    ssh('sudo cp /etc/netplan/01-netcfg.yaml /etc/netplan/01-netcfg.yaml.bak]')
    ssh('sudo echo -e "network:\n\tversion: 2\n\trenderer: NetworkManager\n\tethernets:\n\t\teth0:\n\t\t\taddresses:\n\t\t\t\t- '+network+'\n\t\t\tdnsnameservers:\n\t\t\t\taddresses:\n\t\t\t\t\t- 1.1.1.1\n\t\t\t\t\t- 1.0.0.1\n\t\t\troutes:\n\t\t\t\t- to: default\n\t\t\t\t  via: ['+gateway+']" > /etc/netplan/01-netcfg.yaml')
#elif x == y:    
    # #systemd-networkd
    # ssh('sudo cp /etc/systemd/network/05-eth.network /etc/systemd/network/05-eth.network.bak')
    # ssh('sudo echo -e "#Generated by Firo Masternode Startup Script\n\n[Match]\n'+ni+'\n\n[Network]\nDHCP=no\nDNS=1.1.1.1 1.0.0.1\n\nGateway='+gateway+'\nAddress='+network)
else:
    print("Static IP configuration only avilable for Debian based servers.")
    print("==========Failed to create a static ip address!==========\n")

### Sshd configuration 
verbose("========== Configuring SSHD... ==========\n")
ssh('echo -e "PermitRootLogin no\nMaxAuthTries 3\nMaxSessions 3\nPasswordAuthentication no\nPort '+trop+'"')

## This is clever but i should just disable cloud-init
# if os.path.exists("/etc/ssh/sshd_config.d/50-cloud-init.conf"):
# 	os.remove('/etc/ssh/sshd_config.d/50-cloud-init.conf')
# ## Double check more of these crazy files dont exist
# os.path.exists("/etc/sysconfig/sshd-permitrootlogin"):
# os.remove("/etc/sysconfig/sshd-permitrootlogin")
verbose("\t========== Complete ==========\n\n")

## preform system changes
# def autoswap():
# 	print("Checking if swap exists...")
# 	swap = run(['free'], capture_output=True)
# 	swap = str(swap.stdout).replace("b'", "").replace("\\n", " ").replace("\\t", " ").replace("'", "").split()
# 	pswap = run(['cat','/proc/swaps'], capture_output=True)
# 	pswap = str(pswap.stdout).replace("b'", "").replace("\\n", " ").replace("\\t", " ").replace("'", "").split()
# 	mem = swap[7]
# 	mem = round(int(mem)*.931323/1000000)

# 	if "file" in pswap:
# 		dex=pswap.index('file')
# 		flocation = pswap[dex+1]
# 	else:
# 		flocation = None
    
# 	if "Swap:" in swap:
# 		dex = swap.index("Swap:")
# 		swap = swap[dex+1]
# 		swap = round(int(swap)*.931323/1000000)
# 	else:
# 		swap = None

# 	if mem >= 4:
# 		print("Sufficent memory and swap space found, skipping")

# 	elif swap == None:
# 		size = 4 - (mem)
# 		print(f"No swap found.\nCreating {size}GB swapfile")
# 		run(['fallocate', '-l', size+'G', '/swapfile'])
# 		run(['chmod', '600', '/swapfile'])
# 		run(['mkswap', '/swapfile'])
# 		run(['swapon', '/swapfile'])
# 		f = open('/etc/fstab', 'a')
# 		f.write("/swapfile\tnone\tswap\tsw\t0\t0")
# 		f.close
# 		print("\t========== Complete ==========\n\n")
      
# 	elif flocation == None and swap != None and mem+swap < 4:
# 		size = 4 - (mem+swap)
# 		print(f"Not enough free memory for Firod.\nCreating {size}GB swapfile")
# 		run(['fallocate', '-l', size+"G", '/swapfile'])
# 		run(['chmod', '600', '/swapfile'])
# 		run(['mkswap', '/swapfile'])
# 		run(['swapon', '/swapfile'])
# 		f = open('/etc/fstab', 'a')
# 		f.write("/swapfile\tnone\tswap\tsw\t0\t0")
# 		f.close
# 		print("\t========== Complete ==========\n\n")

verbose(f"========== Adding {usr} user... ==========\n")
ssh('useradd -u '+usr+' -g '+usr+' -d /home/'+usr+' -s /bin/bash -p $(echo '+passwd+'|openssl passwd -1 -stdin)'+usr)
verbose("\t========== Complete ==========\n\n")

### Bootstrap blockchain
ssh() #Bootstrap on his bootstraps

### download firo
reply = requests.get("https://api.github.com/repos/firoorg/firo/releases/latest")
verbose("========== Downloading Firo Binaries tarball and Checksums... ==========\n")
ssh('wget -q -O /home/'+usr+'/firo_core'+reply['assets'][2]['browser_download_url'])
ssh('wget - q '+reply['assets'][7]['browser_download_url']+' --output-document /home'+usr+'/SHASUMS')
verbose("\t========== Complete ==========\n\n")

### Validate intrgrity of tarball with CHECKSUMS ###
print("========== Checking download integrity ==========\n")
sum=ssh('cat /home'+usr+'/SHASUM').split(" ")
for lines in sum:
	if "linux64" in lines:
		l = lines.split("\\")[1]
l2 = ssh('sha256sum /home/'+usr+"/firo_core")
if l == l2:
	verbose("========== \tIntegrity Verified... ==========\n")
else:
	ssh('rm -rf /home/'+usr+'/firo_core')
	ssh('rm /home/'+usr+'/SHASUMS')

### Extract tarball and move binaries to /usr/local/bin ###
verbose("========== Extracting Firo Binaries ==========\n")
ssh('tar -xf /home/'+usr+'/firo_core/firo-** --directory=/home/'+usr+'firo_core/firo_bin')
verbose("========== Moving firo binaries ==========\n")
ssh('sudo mv /home/'+usr+'/firo_core/firo-bin/firod /home/'+usr+'/firo_core/firo-bin/firotx /home/'+usr+'/firo_core/firo-bin/firo-cli /home/'+usr+'/firo_core/firo-bin/qt/firo-qt /usr/local/bin/')

### Create Firod config file ###
verbose("========== Writing firo.conf file ==========\n")
ssh('touch /home/'+usr+'/.firo/firo.conf')
ssh('echo "#----\nrpcuser='+rpc_usrname+'\nrpcpassword='+rpc_passwd+'\nrpcallowip=127.0.0.1\n#----\nlisten=1\nserver=1\ndaemon=1\ndisablewallet=1\nlogtimestamps=1\n#----\nznode=1\nexternalip='+ext+':8168\nznodeblsprivkey='+znodeprivkey+'" > /home/'+usr+'/.firo/firo.conf')
verbose("\t========== Complete ==========\n\n")

### Change ownership of Firod and files to server user ###
verbose("========== Changing Ownership of Firo required files ==========\n")
ssh('sudo chown'+usr+': /usr/local/bin/firod')
ssh('sudo chown'+usr+': /usr/local/bin/firo-qt')
ssh('sudo chown'+usr+': /usr/local/bin/firo-tx')
ssh('sudo chown'+usr+': /usr/local/bin/firo-cli')
ssh('sudo chown -R'+usr+':/home/'+usr)
print("\t========== Complete ==========\n\n")

#### Create firod service
ssh('sudo touch /etc/systemd/system/firod.service')
ssh('[Unit]\nDescription=Firo daemon\nAfter=network.target\n\n[Service]\nType=forking\nRestart=always\nRestartSec=30\n\nUser='+usr+'\nGroup='+usr+'\nPIDFile=/home/'+usr+'/.firo/firod.pid\n\nExecStart=/usr/local/bin/firod\nExecStop=/usr/local/bin/firo-cli stop\n\n[Install]\nWantedBy=multi-user.target')

### Enable SSHD and FIROD ###
ssh('systemctl daemon-reload')
ssh('systemctl start firod.service')
ssh('systemctl enable firod.service')
ssh('systemctl restart sshd.service')

### Create logrotate for Firod ###
ssh('sudo touch /etc/logrotate.d/firod')
ssh('sudo echo "/home/'+usr+'/.firo/debug.log {\ndaily\nmissingok\nrotate 28\ncompress\ncopytruncate\n}"')
### Download and create autoupdate
ssh('sudo apt upgrade -y && sudo apt full sudo apt install unattended-upgrades update-notifier-common jq')
# ### Create firo-autoupdate
ssh(r'''(sudo crontab -l ; echo "@weekly gv=\`curl \"https://api.github.com/repos/firoorg/firo/releases/latest\" |jq -r '.[\"tag_name\"]';fdv=`firod -version | sed -n '1p' | awk '{print $5}' | cut --delimiter \"-\" --fields 1`;if [ \"$gv\" == \"$fdv\" ] ;then break;else fdd=\`curl --silent \"https://api.github.com/repos/firoorg/firo/releases/latest" | jq -r '.['assets'][2]['browser_download_url']`; sumd= \`curl --silent \"https://api.github.com/repos/firoorg/firo/releases/latest" | jq -r '.['assets'][7]['browser_download_url'];wget -q $fdd -P /root/firo_core;sum=wget -q "$sumd" --output-docuent /root/SHASUM;sum=`cat SHA256SUMS |sed -n '6p'|cut --delimiter " " --fields 1`;fsum=`sha256sum firo-core`;if "$fsum" == sha256sum firo_core;then tar -xf firo_core --directory=/root/firo_core/firo;mv /root/firo-core/firo/firod /root/firo-core/firo/firo-cli /usr/local/bin/;rm -rf /root/SHASUM /root/firo_core;else break;fi; fi")| crontab - 2>/dev/null''')
# ### Impliment auto updater
client.close()